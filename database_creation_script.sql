/******************************************************************************/
/*           Generated by IBExpert 2016.4.4.1 4/28/2016 3:00:36 AM            */
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES UTF8;

CREATE DATABASE 'class.mmcs.sfedu.ru:/fbdata/39av/Martindale.fdb'
USER 'IT39' PASSWORD 'it39'
PAGE_SIZE 16384
DEFAULT CHARACTER SET UTF8 COLLATION UTF8;



/******************************************************************************/
/*                                  Domains                                   */
/******************************************************************************/

CREATE DOMAIN DISCOUNT_DOMAIN AS
DOUBLE PRECISION
CHECK (value <= 0.05 and value >= 0.0);



/******************************************************************************/
/*                                 Generators                                 */
/******************************************************************************/

CREATE GENERATOR GEN_AGENT_ID;
SET GENERATOR GEN_AGENT_ID TO 0;

CREATE GENERATOR GEN_MONTHLY_SELLER_BONUS_ID;
SET GENERATOR GEN_MONTHLY_SELLER_BONUS_ID TO 0;

CREATE GENERATOR GEN_OPERATION_ID;
SET GENERATOR GEN_OPERATION_ID TO 9;

CREATE GENERATOR GEN_PRODUCT_ID;
SET GENERATOR GEN_PRODUCT_ID TO 0;

CREATE GENERATOR GEN_PRODUCT_WAREHOUSE_ID;
SET GENERATOR GEN_PRODUCT_WAREHOUSE_ID TO 0;

CREATE GENERATOR GEN_SELLER_ID;
SET GENERATOR GEN_SELLER_ID TO 0;

CREATE GENERATOR GEN_WAREHOUSE_ID;
SET GENERATOR GEN_WAREHOUSE_ID TO 0;



/******************************************************************************/
/*                                 Exceptions                                 */
/******************************************************************************/

CREATE EXCEPTION AMOUNT_MUST_BE_NOT_NEGATIVE 'Amount shouldn''t be less than zero';

CREATE EXCEPTION AMOUNT_MUST_BE_POSITIVE 'Amount must be higher than zero';

CREATE EXCEPTION OP_INSUFFICIENT_PROD_AMOUNT 'Can''t make such operation: not enough products';



/******************************************************************************/
/*                                   Tables                                   */
/******************************************************************************/



CREATE TABLE AGENT (
    ID_AGENT   INTEGER NOT NULL,
    NAME       VARCHAR(127),
    TOWN       VARCHAR(63),
    PHONE      VARCHAR(31),
    ID_SELLER  INTEGER
);

CREATE TABLE HT_AGENT (
    ID_AGENT     INTEGER NOT NULL,
    HIB_SESS_ID  CHAR(36)
);

CREATE TABLE HT_OPERATION (
    ID_OPERATION  INTEGER NOT NULL,
    HIB_SESS_ID   CHAR(36)
);

CREATE TABLE HT_PRODUCT (
    ID_PRODUCT   INTEGER NOT NULL,
    HIB_SESS_ID  CHAR(36)
);

CREATE TABLE HT_WAREHOUSE (
    ID_WAREHOUSE  INTEGER NOT NULL,
    HIB_SESS_ID   CHAR(36)
);

CREATE TABLE OPERATION (
    ID_OPERATION  INTEGER NOT NULL,
    ID_PRODUCT    INTEGER NOT NULL,
    ID_AGENT      INTEGER NOT NULL,
    ID_WAREHOUSE  INTEGER NOT NULL,
    ID_SELLER     INTEGER NOT NULL,
    OPTYPE        CHAR(1) NOT NULL,
    AMOUNT        NUMERIC(15,2) NOT NULL,
    PRICE         NUMERIC(15,2) NOT NULL,
    POST_DATE     DATE NOT NULL,
    DISCOUNT      DISCOUNT_DOMAIN NOT NULL
);

CREATE TABLE PRODUCT (
    ID_PRODUCT    INTEGER NOT NULL,
    NOMENCLATURE  VARCHAR(127),
    UNIT          VARCHAR(31)
);

CREATE TABLE PRODUCT_WAREHOUSE (
    ID_PRODUCT_WAREHOUSE  INTEGER NOT NULL,
    ID_PRODUCT            INTEGER NOT NULL,
    ID_WAREHOUSE          INTEGER NOT NULL,
    AMOUNT                NUMERIC(15,2) NOT NULL
);

CREATE TABLE SELLER (
    ID_SELLER                INTEGER NOT NULL,
    NAME                     VARCHAR(63) NOT NULL,
    BONUS_LAST_TIME_UPDATED  DATE NOT NULL,
    BONUS_SIZE               DOUBLE PRECISION NOT NULL
);

CREATE TABLE WAREHOUSE (
    ID_WAREHOUSE  INTEGER NOT NULL,
    NAME          VARCHAR(127),
    TOWN          VARCHAR(63)
);

INSERT INTO AGENT (ID_AGENT, NAME, TOWN, PHONE, ID_SELLER) VALUES (0, 'Vasya', 'Moscow', '10291', 1);
INSERT INTO AGENT (ID_AGENT, NAME, TOWN, PHONE, ID_SELLER) VALUES (3, 'Appol', 'California', '10291', 1);
INSERT INTO AGENT (ID_AGENT, NAME, TOWN, PHONE, ID_SELLER) VALUES (2, 'Intel', 'NN', '10291', 1);
INSERT INTO AGENT (ID_AGENT, NAME, TOWN, PHONE, ID_SELLER) VALUES (1, 'Sanya', 'Rostov', '10291', 1);
INSERT INTO AGENT (ID_AGENT, NAME, TOWN, PHONE, ID_SELLER) VALUES (5, 'Sadam', 'Iraq', '666', 0);

COMMIT WORK;

INSERT INTO OPERATION (ID_OPERATION, ID_PRODUCT, ID_AGENT, ID_WAREHOUSE, ID_SELLER, OPTYPE, AMOUNT, PRICE, POST_DATE, DISCOUNT) VALUES (0, 0, 0, 0, 0, 'R   ', 10, 123, '1995-01-12', 0);
INSERT INTO OPERATION (ID_OPERATION, ID_PRODUCT, ID_AGENT, ID_WAREHOUSE, ID_SELLER, OPTYPE, AMOUNT, PRICE, POST_DATE, DISCOUNT) VALUES (1, 0, 0, 0, 0, 'A   ', 1000, 123, '1995-01-12', 0);
INSERT INTO OPERATION (ID_OPERATION, ID_PRODUCT, ID_AGENT, ID_WAREHOUSE, ID_SELLER, OPTYPE, AMOUNT, PRICE, POST_DATE, DISCOUNT) VALUES (2, 0, 0, 0, 0, 'A   ', 1000, 123, '1995-01-12', 0);
INSERT INTO OPERATION (ID_OPERATION, ID_PRODUCT, ID_AGENT, ID_WAREHOUSE, ID_SELLER, OPTYPE, AMOUNT, PRICE, POST_DATE, DISCOUNT) VALUES (3, 0, 0, 0, 0, 'A   ', 1000, 123, '1995-01-12', 0);
INSERT INTO OPERATION (ID_OPERATION, ID_PRODUCT, ID_AGENT, ID_WAREHOUSE, ID_SELLER, OPTYPE, AMOUNT, PRICE, POST_DATE, DISCOUNT) VALUES (8, 0, 0, 0, 1, 'A   ', 1000, 1000, '2016-03-12', 0.04);
INSERT INTO OPERATION (ID_OPERATION, ID_PRODUCT, ID_AGENT, ID_WAREHOUSE, ID_SELLER, OPTYPE, AMOUNT, PRICE, POST_DATE, DISCOUNT) VALUES (9, 0, 0, 0, 2, 'A   ', 100000, 10000, '2016-03-12', 0.05);

COMMIT WORK;

INSERT INTO PRODUCT (ID_PRODUCT, NOMENCLATURE, UNIT) VALUES (0, 'Computer', 'computerov');
INSERT INTO PRODUCT (ID_PRODUCT, NOMENCLATURE, UNIT) VALUES (1, 'Картошка', 'шт');
INSERT INTO PRODUCT (ID_PRODUCT, NOMENCLATURE, UNIT) VALUES (2, 'Капуста', 'шт');
INSERT INTO PRODUCT (ID_PRODUCT, NOMENCLATURE, UNIT) VALUES (3, 'Морковь', 'кг');
INSERT INTO PRODUCT (ID_PRODUCT, NOMENCLATURE, UNIT) VALUES (4, 'Ненависть', 'г');

COMMIT WORK;

INSERT INTO PRODUCT_WAREHOUSE (ID_PRODUCT_WAREHOUSE, ID_PRODUCT, ID_WAREHOUSE, AMOUNT) VALUES (0, 0, 0, 104090);
INSERT INTO PRODUCT_WAREHOUSE (ID_PRODUCT_WAREHOUSE, ID_PRODUCT, ID_WAREHOUSE, AMOUNT) VALUES (1, 1, 0, 100);
INSERT INTO PRODUCT_WAREHOUSE (ID_PRODUCT_WAREHOUSE, ID_PRODUCT, ID_WAREHOUSE, AMOUNT) VALUES (2, 3, 2, 10);
INSERT INTO PRODUCT_WAREHOUSE (ID_PRODUCT_WAREHOUSE, ID_PRODUCT, ID_WAREHOUSE, AMOUNT) VALUES (3, 2, 3, 4000);

COMMIT WORK;

INSERT INTO SELLER (ID_SELLER, NAME, BONUS_LAST_TIME_UPDATED, BONUS_SIZE) VALUES (0, 'Freidrich', '2016-04-28', 4.92);
INSERT INTO SELLER (ID_SELLER, NAME, BONUS_LAST_TIME_UPDATED, BONUS_SIZE) VALUES (1, 'FreidrichFreidrich', '2016-04-28', 9.6);
INSERT INTO SELLER (ID_SELLER, NAME, BONUS_LAST_TIME_UPDATED, BONUS_SIZE) VALUES (2, 'Aw', '2016-01-31', 0);

COMMIT WORK;

INSERT INTO WAREHOUSE (ID_WAREHOUSE, NAME, TOWN) VALUES (0, 'Sarai', 'Kamchatka');
INSERT INTO WAREHOUSE (ID_WAREHOUSE, NAME, TOWN) VALUES (1, 'Input', 'Kamchatka');
INSERT INTO WAREHOUSE (ID_WAREHOUSE, NAME, TOWN) VALUES (2, 'Mehmat', 'Rostov-na-Dony');

COMMIT WORK;



/******************************************************************************/
/*                                Primary keys                                */
/******************************************************************************/

ALTER TABLE AGENT ADD CONSTRAINT PK_AGENT PRIMARY KEY (ID_AGENT);
ALTER TABLE OPERATION ADD CONSTRAINT PK_OPERATION PRIMARY KEY (ID_OPERATION);
ALTER TABLE PRODUCT ADD CONSTRAINT PK_PRODUCT PRIMARY KEY (ID_PRODUCT);
ALTER TABLE PRODUCT_WAREHOUSE ADD CONSTRAINT PK_PRODUCT_WAREHOUSE PRIMARY KEY (ID_PRODUCT_WAREHOUSE);
ALTER TABLE SELLER ADD CONSTRAINT PK_SELLER PRIMARY KEY (ID_SELLER);
ALTER TABLE WAREHOUSE ADD CONSTRAINT PK_WAREHOUSE PRIMARY KEY (ID_WAREHOUSE);


/******************************************************************************/
/*                                  Triggers                                  */
/******************************************************************************/



SET TERM ^ ;



/******************************************************************************/
/*                          Database event triggers                           */
/******************************************************************************/



/* Trigger: SELLER_BONUS_CALC_CONNECT */
CREATE TRIGGER SELLER_BONUS_CALC_CONNECT
ACTIVE ON CONNECT POSITION 0
as
begin
  update seller s
  set s.bonus_size = (select sum((1.0 - o.discount) * o.price)
                      from operation o
                      where o.id_seller = s.id_seller
                        and o.post_date between dateadd(month, -1, DATEADD (-EXTRACT(DAY FROM CURRENT_DATE)+1 DAY TO CURRENT_DATE))
                                            and DATEADD (-EXTRACT(DAY FROM CURRENT_DATE)+1 DAY TO CURRENT_DATE)) * 0.01 -- coeff
  where datediff(day from current_date to s.bonus_last_time_updated) > 1;
end
^

/******************************************************************************/
/*                            Triggers for tables                             */
/******************************************************************************/



/* Trigger: AGENT_BI */
CREATE TRIGGER AGENT_BI FOR AGENT
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id_agent is null) then
    new.id_agent = gen_id(gen_agent_id,1);
end
^

/* Trigger: OPERATION_BI */
CREATE TRIGGER OPERATION_BI FOR OPERATION
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id_operation is null) then
    new.id_operation = gen_id(gen_operation_id,1);
end
^

/* Trigger: OPERATION_CHECK_NON_NEG_AMOUNT */
CREATE TRIGGER OPERATION_CHECK_NON_NEG_AMOUNT FOR OPERATION
ACTIVE AFTER INSERT OR UPDATE POSITION 0
AS
begin
  if (new.amount<0) then
  exception AMOUNT_MUST_BE_NOT_NEGATIVE;
end
^

/* Trigger: OPERATION_UPD_PRODUCT_WAREHOUSE */
CREATE TRIGGER OPERATION_UPD_PRODUCT_WAREHOUSE FOR OPERATION
ACTIVE AFTER INSERT POSITION 0
AS
begin
  if (new.optype='A')
      then begin
                update product_warehouse pw
                set pw.amount = pw.amount + new.amount
                where (id_warehouse = new.id_warehouse) and (id_product = new.id_product);
           end
  if (new.optype='R')
      then begin
                if ((select amount
                     from product_warehouse
                     where (id_warehouse = new.id_warehouse) and
                           (id_product = new.id_product))  < new.amount)
                     then exception OP_INSUFFICIENT_PROD_AMOUNT;
                update product_warehouse pw
                set pw.amount = pw.amount - new.amount
                where (id_warehouse = new.id_warehouse) and (id_product = new.id_product);
           end
end
^

/* Trigger: PRODUCT_BI */
CREATE TRIGGER PRODUCT_BI FOR PRODUCT
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id_product is null) then
    new.id_product = gen_id(gen_product_id,1);
end
^

/* Trigger: PRODUCT_WAREHOUSE_BI */
CREATE TRIGGER PRODUCT_WAREHOUSE_BI FOR PRODUCT_WAREHOUSE
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id_product_warehouse is null) then
    new.id_product_warehouse = gen_id(gen_product_warehouse_id,1);
end
^

/* Trigger: SELLER_BI */
CREATE TRIGGER SELLER_BI FOR SELLER
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id_seller is null) then
    new.id_seller = gen_id(gen_seller_id,1);
end
^

/* Trigger: SELLER_BONUS_CALCULATE */
CREATE TRIGGER SELLER_BONUS_CALCULATE FOR OPERATION
ACTIVE AFTER INSERT POSITION 0
AS
begin
  update seller s
  set s.bonus_last_time_updated = current_date,
      s.bonus_size = (select sum((1.0 - o.discount) * o.price)
                      from operation o
                      where o.id_seller = s.id_seller
                        and o.post_date between dateadd(month, -1, DATEADD (-EXTRACT(DAY FROM CURRENT_DATE)+1 DAY TO CURRENT_DATE))
                                            and DATEADD (-EXTRACT(DAY FROM CURRENT_DATE)+1 DAY TO CURRENT_DATE)) * 0.01 -- coeff

  where s.id_seller = new.id_seller
    and datediff(day from current_date to s.bonus_last_time_updated) > 1;
end
^

/* Trigger: WAREHOUSE_BI */
CREATE TRIGGER WAREHOUSE_BI FOR WAREHOUSE
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id_warehouse is null) then
    new.id_warehouse = gen_id(gen_warehouse_id,1);
end
^
SET TERM ; ^

