/******************************************************************************/
/***          Generated by IBExpert 2009.06.05 14.04.2016 12:15:02          ***/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES UTF8;

CREATE DATABASE 'class.mmcs.sfedu.ru:/fbdata/39av/Martindale.fdb'
USER 'IT39' PASSWORD 'it39'
PAGE_SIZE 16384
DEFAULT CHARACTER SET UTF8;



/******************************************************************************/
/***                               Generators                               ***/
/******************************************************************************/

CREATE GENERATOR GEN_AGENT_ID;
SET GENERATOR GEN_AGENT_ID TO 0;

CREATE GENERATOR GEN_MONTHLY_SELLER_BONUS_ID;
SET GENERATOR GEN_MONTHLY_SELLER_BONUS_ID TO 0;

CREATE GENERATOR GEN_OPERATION_ID;
SET GENERATOR GEN_OPERATION_ID TO 0;

CREATE GENERATOR GEN_PRODUCT_ID;
SET GENERATOR GEN_PRODUCT_ID TO 0;

CREATE GENERATOR GEN_PRODUCT_WAREHOUSE_ID;
SET GENERATOR GEN_PRODUCT_WAREHOUSE_ID TO 0;

CREATE GENERATOR GEN_SELLER_ID;
SET GENERATOR GEN_SELLER_ID TO 0;

CREATE GENERATOR GEN_WAREHOUSE_ID;
SET GENERATOR GEN_WAREHOUSE_ID TO 0;



/******************************************************************************/
/***                               Exceptions                               ***/
/******************************************************************************/

CREATE EXCEPTION AMOUNT_MUST_BE_NOT_NEGATIVE 'Amount shouldn''t be less than zero';

CREATE EXCEPTION AMOUNT_MUST_BE_POSITIVE 'Amount must be higher than zero';



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE AGENT (
    ID_AGENT   INTEGER NOT NULL,
    NAME       VARCHAR(127),
    TOWN       VARCHAR(63),
    PHONE      VARCHAR(31),
    ID_SELLER  INTEGER
);

CREATE TABLE MONTHLY_SELLER_BONUS (
    ID_BONUS    INTEGER NOT NULL,
    BONUS_SIZE  INTEGER NOT NULL,
    ID_SELLER   INTEGER NOT NULL
);

CREATE TABLE OPERATION (
    ID_OPERATION  INTEGER NOT NULL,
    ID_PRODUCT    INTEGER NOT NULL,
    ID_AGENT      INTEGER NOT NULL,
    ID_WAREHOUSE  INTEGER NOT NULL,
    ID_SELLER     INTEGER NOT NULL,
    OPTYPE        CHAR(1) NOT NULL,
    AMOUNT        NUMERIC(15,2) NOT NULL,
    PRICE         NUMERIC(15,2) NOT NULL,
    POST_DATE     DATE NOT NULL,
    DISCOUNT      FLOAT NOT NULL
);

CREATE TABLE PRODUCT (
    ID_PRODUCT    INTEGER NOT NULL,
    NOMENCLATURE  VARCHAR(127),
    UNIT          VARCHAR(31)
);

CREATE TABLE PRODUCT_WAREHOUSE (
    ID_PRODUCT_WAREHOUSE  INTEGER NOT NULL,
    ID_PRODUCT            INTEGER NOT NULL,
    ID_WAREHOUSE          INTEGER NOT NULL,
    AMOUNT                NUMERIC(15,2) NOT NULL
);

CREATE TABLE SELLER (
    ID_SELLER  INTEGER NOT NULL
);

CREATE TABLE WAREHOUSE (
    ID_WAREHOUSE  INTEGER NOT NULL,
    NAME          VARCHAR(127),
    TOWN          VARCHAR(63)
);

INSERT INTO WAREHOUSE (ID_WAREHOUSE, NAME, TOWN) VALUES (0, 'Sarai', 'Kamchatka');
INSERT INTO WAREHOUSE (ID_WAREHOUSE, NAME, TOWN) VALUES (1, 'Input', 'Kamchatka');
INSERT INTO WAREHOUSE (ID_WAREHOUSE, NAME, TOWN) VALUES (2, 'Mehmat', 'Rostov-na-Dony');

COMMIT WORK;

INSERT INTO SELLER (ID_SELLER) VALUES (0);
INSERT INTO SELLER (ID_SELLER) VALUES (1);
INSERT INTO SELLER (ID_SELLER) VALUES (2);

COMMIT WORK;

INSERT INTO PRODUCT_WAREHOUSE (ID_PRODUCT_WAREHOUSE, ID_PRODUCT, ID_WAREHOUSE, AMOUNT) VALUES (0, 0, 0, 100);
INSERT INTO PRODUCT_WAREHOUSE (ID_PRODUCT_WAREHOUSE, ID_PRODUCT, ID_WAREHOUSE, AMOUNT) VALUES (1, 1, 0, 100);
INSERT INTO PRODUCT_WAREHOUSE (ID_PRODUCT_WAREHOUSE, ID_PRODUCT, ID_WAREHOUSE, AMOUNT) VALUES (2, 3, 2, 10);
INSERT INTO PRODUCT_WAREHOUSE (ID_PRODUCT_WAREHOUSE, ID_PRODUCT, ID_WAREHOUSE, AMOUNT) VALUES (3, 2, 3, 4000);

COMMIT WORK;

INSERT INTO PRODUCT (ID_PRODUCT, NOMENCLATURE, UNIT) VALUES (0, 'Computer', 'computerov');
INSERT INTO PRODUCT (ID_PRODUCT, NOMENCLATURE, UNIT) VALUES (1, 'Картошка', 'шт');
INSERT INTO PRODUCT (ID_PRODUCT, NOMENCLATURE, UNIT) VALUES (2, 'Капуста', 'шт');
INSERT INTO PRODUCT (ID_PRODUCT, NOMENCLATURE, UNIT) VALUES (3, 'Морковь', 'кг');
INSERT INTO PRODUCT (ID_PRODUCT, NOMENCLATURE, UNIT) VALUES (4, 'Ненависть', 'г');

COMMIT WORK;

INSERT INTO AGENT (ID_AGENT, NAME, TOWN, PHONE, ID_SELLER) VALUES (0, 'Vasya', 'Moscow', '10291', 1);
INSERT INTO AGENT (ID_AGENT, NAME, TOWN, PHONE, ID_SELLER) VALUES (3, 'Appol', 'California', '10291', 1);
INSERT INTO AGENT (ID_AGENT, NAME, TOWN, PHONE, ID_SELLER) VALUES (2, 'Intel', 'NN', '10291', 1);
INSERT INTO AGENT (ID_AGENT, NAME, TOWN, PHONE, ID_SELLER) VALUES (1, 'Sanya', 'Rostov', '10291', 1);

COMMIT WORK;



/******************************************************************************/
/***                              Primary Keys                              ***/
/******************************************************************************/

ALTER TABLE AGENT ADD CONSTRAINT PK_AGENT PRIMARY KEY (ID_AGENT);
ALTER TABLE MONTHLY_SELLER_BONUS ADD CONSTRAINT PK_MONTHLY_SELLER_BONUS PRIMARY KEY (ID_BONUS);
ALTER TABLE OPERATION ADD CONSTRAINT PK_OPERATION PRIMARY KEY (ID_OPERATION);
ALTER TABLE PRODUCT ADD CONSTRAINT PK_PRODUCT PRIMARY KEY (ID_PRODUCT);
ALTER TABLE PRODUCT_WAREHOUSE ADD CONSTRAINT PK_PRODUCT_WAREHOUSE PRIMARY KEY (ID_PRODUCT_WAREHOUSE);
ALTER TABLE SELLER ADD CONSTRAINT PK_SELLER PRIMARY KEY (ID_SELLER);
ALTER TABLE WAREHOUSE ADD CONSTRAINT PK_WAREHOUSE PRIMARY KEY (ID_WAREHOUSE);


/******************************************************************************/
/***                                Triggers                                ***/
/******************************************************************************/


SET TERM ^ ;



/******************************************************************************/
/***                          Triggers for tables                           ***/
/******************************************************************************/



/* Trigger: OPERATION_CHECK_NON_NEG_AMOUNT */
CREATE TRIGGER OPERATION_CHECK_NON_NEG_AMOUNT FOR OPERATION
ACTIVE AFTER INSERT OR UPDATE POSITION 0
AS
begin
  if (new.amount<0) then
  exception AMOUNT_MUST_BE_NOT_NEGATIVE;
end
^

/* Trigger: OPERATION_UPD_PRODUCT_WAREHOUSE */
CREATE TRIGGER OPERATION_UPD_PRODUCT_WAREHOUSE FOR OPERATION
ACTIVE AFTER INSERT POSITION 0
AS
begin
  if (new.optype='A')
      then
                update product_warehouse pw
                set pw.amount = pw.amount - new.amount
                where (id_warehouse = new.id_warehouse) and (id_product = new.id_product);
  if (new.optype='R')
      then
                update product_warehouse pw
                set pw.amount = pw.amount + new.amount
                where (id_warehouse = new.id_warehouse) and (id_product = new.id_product);
end
^

SET TERM ; ^

